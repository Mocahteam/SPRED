piece base, body, left, right, gun, gunbase, gunpoint;

static-var isOpen, normalSpeed;

#include "springdefs.h"

#ifndef UNIT_VAR
#define UNIT_VAR 1024	//8 vars
#endif
#ifndef TEAM_VAR
#define TEAM_VAR 048	//64 vars
#endif
#ifndef ALLY_VAR
#define ALLY_VAR 3072	//64 vars
#endif
#ifndef GLOBAL_VAR
#define GLOBAL_VAR 4096	//1024 vars
#endif

#define SIG_STOPMOVING 8
#define SIG_CHANGE 4
#define SIG_AIM 1

Create()
{
	hide gun;
	turn gunpoint to x-axis <-90> now;
	turn gunbase to x-axis <90> now;
	normalSpeed=get MAX_SPEED;
	set ARMORED to 1;
	while(get BUILD_PERCENT_LEFT) {
		move base to y-axis ([-32]*(get BUILD_PERCENT_LEFT)/100) now;
		sleep 60;
	}
	move base to y-axis 0 now;
	sleep 4000;
	set ARMORED to 0;
}

Killed(severity,corpsetype) {
	hide left;
	hide right;
	hide gun;
	
	explode gun type FALL;
	explode left type SHATTER;
	explode right type SHATTER;
}

#define WAITTIME 500
#define TURNSPEED <360>


QueryWeapon1(piecenum)
{
	piecenum=gunpoint;
}

AimFromWeapon1(piecenum)
{
	piecenum=base;
}

Close() {
//	signal SIG_CHANGE;
	set-signal-mask SIG_CHANGE;
	isOpen=0;
	turn gunbase to x-axis <90> speed <50>;
	turn gunbase to y-axis <0> speed <50>;
	wait-for-turn gunbase around y-axis;
	move gun to y-axis [0] speed [20];
	wait-for-move gun along y-axis;
	move left to x-axis [0] speed [20];
	move right to x-axis [0] speed [20];
	wait-for-move left along x-axis;
	hide gun;
	set MAX_SPEED to normalSpeed;
}

Open() {
//	signal SIG_CHANGE;
	set-signal-mask SIG_CHANGE;
	set MAX_SPEED to 1;
	show gun;
	move left to x-axis [10] speed [20];
	move right to x-axis [-10] speed [20];
	wait-for-move left along x-axis;
	move gun to y-axis [20] speed [20];
	wait-for-move gun along y-axis;
	isOpen=1;
}

#define TURNRATE 270

AimWeapon1(h,p)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	if (isOpen) {
		turn gunbase to x-axis (<90>-p) speed <50>;
		while (TURNRATE > h) {
			set HEADING to 0-TURNRATE + get HEADING;
			h = h + TURNRATE;
			sleep 30;
		}
		while (h > TURNRATE) {
			set HEADING to TURNRATE + get HEADING;
			h = h - TURNRATE;
			sleep 30;
		}
		wait-for-turn gunbase around x-axis;
		return 1;
	}
	return 0;
}

StartMoving()
{
	signal SIG_CHANGE;
	set-signal-mask SIG_CHANGE;
	sleep 50;
	call-script Close();
	spin body around x-axis speed <180> accelerate <3600>;
}

StopMoving()
{
//	sleep 30;
	signal SIG_CHANGE;
	set-signal-mask SIG_CHANGE;
	turn body to x-axis 0 now;
	stop-spin body around x-axis;
	sleep 200;
	start-script Open();
}

lua_GetHealth(a) {
	return 0;
}

#define DAMAGE 150

FireWeapon1() {
	var target;
	emit-sfx 1024 from gunpoint;
	target = get TARGET_ID(1);
	if (target > 0) {
		get UNIT_VAR+6 (0 - target,  DAMAGE + get UNIT_VAR+6 (target));
		sleep 5 * get XZ_HYPOT(get UNIT_XZ(target) - get PIECE_XZ(base)) /[2];
		if (get UNIT_VAR+6(target) > 0)
			get UNIT_VAR+6 (0 - target, 0- DAMAGE + get UNIT_VAR+6 (target));
	}
}

BlockShot1(in_unitid, out_block, in_usertarget) {
	if (in_usertarget) {
		call-script lua_GetHealth(in_usertarget);
		out_block = ((get LUA1) < get UNIT_VAR+6(in_usertarget));
		if (out_block) {
			set CHANGE_TARGET to 1;
		}
	}
}

TargetWeight1(target, weight) {
	call-script lua_GetHealth(target);
	weight = [1] + [50]*((get LUA1) < get UNIT_VAR+6(target));
}